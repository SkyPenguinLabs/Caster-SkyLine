set CasterInputStream := import("Backend/Core/Scripts/Inputs.sky");
set CasterECPControllers := import("Backend/Core/Scripts/ECPFuncs.sky");

set commandexists := [
    "roku-dialinfo",
    "roku-devinfo",
    "roku-getapps",
    "roku-getrawapps",
    "roku-currentapp",
    "roku-executeactions",
    "roku-remote",
    "cast-setupinfo",
    "cast-legacyconfig",
    "cast-legacyapps",
    "cast-activeapp",
    "cast-shutdownapp",
    "cast-devdescription",
    "cast-changename",
    "apple-airplayinfo",
    "apple-streaminfo",
    "apple-serverinfo",
    "amazon-devdesc",
    "roku-startapp",
    "roku-searchquery"
];

set MapOCommands := {
    "roku-startapp": Func(target) {
        set CheckAppID := CasterInputStream::CasterInput("{}Enter The Application ID{}".Format(
            console.HtmlToAnsi("5d42f5", ""),
            console.HtmlToAnsi("42f5bf", "")
        ));
        set resp := http.NullPost(
            sprintf(
                Roku.DevAppLaunch,
                target,
                CheckAppID
            )
        )["StatusCode"];
        println("[+] Status: " + sprint(resp))
        
    },
    "roku-searchquery": Func(target) {
        set CheckAppQuery := CasterInputStream::CasterInput("{}Enter The Search Query{}".Format(
            console.HtmlToAnsi("5d42f5", ""),
            console.HtmlToAnsi("42f5bf", "")
        ));
        set resp := http.NullPost(
            sprintf(
                Roku.DeviceBrowse,
                target,
                CheckAppQuery
            )
        )["StatusCode"];
        println("[+] Status: " + sprint(resp))
    },
    "roku-executeactions": Func(target) {
        set Actions := json.Parse("Backend/Conf/DataFiles/Roku_DevActions.json");
        foreach action_map in Actions["RokuDevActions"] {
            print(
                console.HtmlToAnsi("f7f7f7", "")
            )
            println(`┃` + "Device Action  : " + action_map["Keypress"])
            println(`┃` + "Repeat Action  : " + action_map["Repeat"])
            println(`┃` + "Wait...[ms]    : " + action_map["WaitSleep"])
            set f := false;
            foreach cmd in CasterECPControllers::CommandActions_Arr {
                if (cmd == action_map["Keypress"].Lower()) {
                    f = true;
                }
            }
            set count := int(0);
            set repeat := int(action_map["Repeat"]);
            switch (f) {
                case true {
                    if (repeat == int(0)) {
                        CasterECPControllers::CommandActions_ECP[
                            action_map["Keypress"].Lower()
                        ](target, action_map["WaitSleep"])
                    }
                    for (count < repeat) {
                        count++
                        CasterECPControllers::CommandActions_ECP[
                            action_map["Keypress"].Lower()
                        ](target, action_map["WaitSleep"])
                    }
                    count = 0;
                }
                default {
                    println("Invalid command")
                }
            }
        }
    },
    "roku-dialinfo": Func(target){
        set Body := http.Get(
            sprintf(
                Roku.DevDial, target
            )
        );
        println(Body["ResponseBody"])        

    },
    "roku-devinfo": Func(target) {
        set Body := http.Get(
            sprintf(
                Roku.DeviceInformation,
                target
            )
        );
        set Parsed := xml.Parse(Body["ResponseBody"]);
        set Columns := ["Name", "Value"];
        set Rows := [];
        foreach i in Parsed["device-info"] {
            set first := Parsed["device-info"][i].FirstK();
            Rows.Append(
                [first, sprint(Parsed["device-info"][i][first])] 
            )
        }
        println(console.Table(Rows, Columns))
        Rows.Reset()
        io.restore()
    },
    "roku-getapps": Func(target){
        set Body := http.Get(
            sprintf(
                Roku.DeviceApplications,
                target
            )
        );
        set bod := Body["ResponseBody"];
        bod = bod.Split("</app>")
        set Columns := ["Name / Tag"];
        set Rows := [];
        foreach part in bod {
            Rows.Append(
                [
                        part.MultIndex(
                            part.Find(">")+int(1), int(0)
                        )
                ]
            )
        }
        println(console.Table(Rows, Columns))
        Rows.Reset()
        io.restore()
    },
    "roku-getrawapps": Func(target){
        set Body := http.Get(
            sprintf(
                Roku.DeviceApplications,
                target
            )
        );
        set Tags := [`id="(\d+)"`]; 
        println(
            Unique.HighlightPattern(
                Body["ResponseBody"],
                [console.HtmlToAnsi("FF5F00", ""), console.HtmlToAnsi("FF5F00", "")],
                Tags
            )
        )  
    },
    "roku-currentapp": Func(target){
        set Body := http.Get(
            sprintf(
                Roku.DeviceActiveApplications,
                target
            )
        );
        set Parsed := xml.Parse(Body["ResponseBody"]);
        set Columns := ["Application Name"];
        set Rows := [
            [Parsed["active-app"]["app"]["app"]]
        ];
        println(console.Table(Rows, Columns))
        Rows.Reset()
        io.restore()
    },
    "roku-remote": Func(target){
        ExecuteFF("Framework", "EnterECP", target)
    },
    "cast-devdescription": Func(target) {
        set Body := http.Get(
            sprintf(
                Google.CastDeviceDescription,
                target,
                "8008"
            )
        );
        print(" \n ")
        println(io.FormatBox(
            Unique.HighlightPattern(
                Body["ResponseBody"],
                [
                    console.HtmlToAnsi("0ee6c2", ""),
                    console.HtmlToAnsi("0ee6c2", ""),
                    console.HtmlToAnsi("0ee6c2", ""),
                    console.HtmlToAnsi("0ee6c2", ""),
                    console.HtmlToAnsi("0ee6c2", ""),
                    console.HtmlToAnsi("fa5b05", ""),
                    console.HtmlToAnsi("fa5b05", "")

                ],
                [
                    `<UDN>(.*?)>`,
                    `<modelName>(.*?)>`,
                    `<manufacturer>(.*?)>`,
                    `<deviceType>(.*?)>`,
                    `<friendlyName>(.*?)>`,
                    `<serviceId>(.*?)>`,
                    `<serviceType>(.*?)>`
                ]
            )
        ))
        print(" \n ")
    },
    "cast-setupinfo": Func(target){
        set Body := http.Get(
            sprintf(
                Google.CastDeviceInfo,
                target,
                "8008"
            )
        );
        set Columns := ["Name", "Value"];
        set Rows := [];
        print("{}[Caster] {}DEBUG: {} \n ".Format(
            console.HtmlToAnsi("fa5b05", ""),
            console.HtmlToAnsi("0ee6c2", ""), 
            "Storing Response In File \n "
        ))
        set Parsed := json.Parse(Body["ResponseBody"]);

        set InitBuffer := File.CreateWrite("UserBase/ChromeCastTmp/CastSetupInfo.txt", Body["ResponseBody"]);
        if (InitBuffer == true) {
            print("{}[Caster] {}DEBUG: {} \n ".Format(
                console.HtmlToAnsi("fa5b05", ""),
                console.HtmlToAnsi("0ee6c2", ""), 
                "Response Stored In " + "UserBase/ChromeCastTmp/CastSetupInfo.txt" + " \n "
            ))
        } else {
            print("{}[Caster] {}Error: {} \n ".Format(
                console.HtmlToAnsi("fa5b05", ""),
                console.HtmlToAnsi("0ee6c2", ""), 
                "Could not open file \n "
            ))
        }
        foreach key in Parsed {
            if (
                Typeof(Parsed[key]) == "HASH"
            ) {
                foreach node in Parsed[key] {
                    Rows.Append(
                        [node, sprint(
                            Parsed[key][node]
                        )]
                    )
                }
            } else {
                set examplekey := `
                AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
                `;
                if (
                    sprint(Parsed[key]).Length() > examplekey.Length()
                ) {
                    print("{}[Caster] {}DEBUG: {} \n ".Format(
                        console.HtmlToAnsi("fa5b05", ""),
                        console.HtmlToAnsi("0ee6c2", ""), 
                        "Writing this key to a file...too large"
                    ))
                    set buf := File.New("UserBase/ChromeCastTmp/ChromeCast_Data_Session_based.txt");
                    if (buf == true) {
                        File.Write(
                            sprint(
                                Parsed[key]
                            )
                        )
                        print("{}[Caster] {}DEBUG: {} \n ".Format(
                            console.HtmlToAnsi("fa5b05", ""),
                            console.HtmlToAnsi("0ee6c2", ""), 
                            "Wrote to file" + "UserBase/ChromeCastTmp/..."
                        ))
                    } else {
                        println("Error: Failed to write")
                    }
                    // we can go ahead and write the data to the file
                    // we just want users to save everything properly
                } else {
                    Rows.Append(
                        [key, sprint(Parsed[key])]
                    )   
                }
            }
        }
        println(console.Table(Rows, Columns))
        Rows.Reset()
        io.restore()
    },
    "cast-legacyapps": Func(target){
        set Body := http.Get(Google.CastDeviceLegacyConf);
        set columns := ["App", "URL"];
        set Rows := [];
        set applications := json.Parse(Body["ResponseBody"].Pop(`)]}'`))["applications"];
        foreach node in applications {
            Rows.Append(
                [node["app_name"], node["url"]]
            )
        }
        println(console.Table(Rows, columns))
        Rows.Reset()
        io.restore()
    },
    "cast-legacyconfig": Func(target){
        set Body := http.Get(Google.CastDeviceLegacyConf);
        println(
            http.Get(
                Google.CastDeviceLegacyConf
            )["ResponseBody"].Pop(
                `)]}'`
            )
        )
    },
    "cast-activeapp": Func(target){
        set CheckAppID := CasterInputStream::CasterInput("{}Enter The Application ID{}".Format(
            console.HtmlToAnsi("5d42f5", ""),
            console.HtmlToAnsi("42f5bf", "")
        ));
        print(" \n  \n ")
        set Columns := ["App Name", "Options", "State"];
        set Rows := [];
        set Body := http.Get(
            sprintf(
                Google.CastDeviceApplications,
                target,
                "8008",
                CheckAppID
            )
        );
        //if (Body["ResponseBody"] == null)  
        set Parsed := xml.Parse(Body["ResponseBody"]);
        Rows.Append(
            [
                CheckAppID,
                Parsed["service"]["state"]["state"],
                Parsed["service"]["options"]["options"]
            ]
        )
        println(console.Table(Rows, Columns))
        Rows.Reset()
        io.restore()
    },
    "cast-shutdownapp": Func(target) {
        set AppID := CasterInputStream::CasterInput("{}Enter The Application ID{}".Format(
            console.HtmlToAnsi("5d42f5", ""),
            console.HtmlToAnsi("42f5bf", "")
        ));
        set Resp := http.Delete(
            sprintf(
                Google.CastDeviceApplications,
                target,
                "8008",
                AppID
            )
        );
        println("Server Response> " + sprint(Resp["StatusCode"]))
    },
    "cast-changename": Func(target) {
        set Name := CasterInputStream::CasterInput("{}Enter The New Name{}".Format(
            console.HtmlToAnsi("5d42f5", ""),
            console.HtmlToAnsi("42f5bf", "")
        ));
        // since we are posting via HTTPS we need to create some transport
        set Resp := http.PostTLS(
            sprintf(
                "https://%s:8443/setup/set_eureka_info",
                target
            ),
            {
                "name": "{}".Format(Name),
            }
        );
        println("Server Response> " + sprint(Resp["StatusCode"]))
    },
    "apple-airplayinfo": Func(target) {
        mode("pwn")
        set Resp := http.Get(
            sprintf(
                Apple.AirPlayInfo,
                target
            )
        );
        print("{}[Caster] {}DEBUG: {} \n ".Format(
            console.HtmlToAnsi("fa5b05", ""),
            console.HtmlToAnsi("0ee6c2", ""), 
            "Binary Data - Writing to bplist file..."
        ))
        set InitBuffer := File.CreateWrite("UserBase/AppleTmp/ServerInfo", Resp["ResponseBody"]);
        set buf := File.New("UserBase/AppleTmp/ServerInfo");
        set Columns := ["Binary Data | String Out"];
        set Rows := [];
        if (buf == true) {
            foreach v in Strings("UserBase/AppleTmp/ServerInfo") {
                Rows.Append(
                    [v]
                )
            }
        } else {
            println("Error: Failed to create")
        }
        println(console.Table(Rows, Columns))
        Rows.Reset()
        io.restore()
    },
    "apple-serverinfo": Func(target){
        set Body := http.Get(
            sprintf(
                Apple.AirPlayServerInfo,
                target
            )
        );
        print(" \n ")
        println(io.FormatBox(
            Unique.HighlightPattern(
                Body["ResponseBody"],
                [
                    console.HtmlToAnsi("0ee6c2", ""),
                    console.HtmlToAnsi("fa5b05", "")

                ],
                [
                    `<string>(.*?)>`,
                    `<integer>(.*?)>`
                ]
            )
        ))

    },
    "apple-streaminfo": Func(target) {
        set Respx := http.Get(
            sprintf(
                Apple.AirPlayStreamInfo,
                target
            )
        );
        print(" \n ")
        println(io.FormatBox(
            Unique.HighlightPattern(
                Respx["ResponseBody"],
                [
                    console.HtmlToAnsi("0ee6c2", ""),
                    console.HtmlToAnsi("fa5b05", "")

                ],
                [
                    `.*<string>([0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})</string>.*`,
                    `.*<string>([0-9a-fA-F]{2}[:-]){5}([0-9a-fA-F]{2})</string>.*`
                ]
            ),
            false
        ))
    },
    //:::::::::::::::: Section Defines Amazon :::::::::::::::
    
    "amazon-devdesc": Func(target) {
        set uuid := CasterInputStream::CasterInput("{}Enter FireTV UUID{}".Format(
            console.HtmlToAnsi("5d42f5", ""),
            console.HtmlToAnsi("42f5bf", "")
        ));
        set Respx := http.Get(
            sprintf(
                Amazon.TvDeviceDescription,
                target,
                uuid
            )
        );
        set pat := "";
        foreach char in Respx["ResponseBody"].Split(">") {
            pat += char + " \n ";
        }
        print(" \n ")
        println(io.FormatBox(
            Unique.HighlightPattern(
                pat,
                [
                    console.HtmlToAnsi("f54299", ""),
                    console.HtmlToAnsi("424bf5", ""),
                    console.HtmlToAnsi("0ee6c2", ""),
                    console.HtmlToAnsi("0ee6c2", ""),
                    console.HtmlToAnsi("f54299", ""),
                    console.HtmlToAnsi("f54299", ""),
                    console.HtmlToAnsi("f54299", "")

                ],
                [
                    `(.*?)</deviceType `,
                    `(.*?)</friendlyName`,
                    `(.*?)</manufacturer`,
                    `(.*?)</UDN`,
                    `(.*?)</SCPDURL`,
                    `(.*?)</controlURL`,
                    `(.*?)</eventSubURL`
                ]
            ),
            false
        ))
    }
};
 
define EnumerateDevice(command, target) {
    set found := false;
    foreach variable in commandexists {
        if (variable == command) {
            found = true;
        }
    }
    if (found == true) {
        set res := MapOCommands[command](target);
    } else {
        println("")
        console.TableNew(
            console.HtmlToAnsi(
                "03fcb6", "", false
            ), 
            console.HtmlToAnsi(
                "ffffff", "", false
            ),  
            console.HtmlToAnsi(
                "ffffff", "", false
            ),  
            console.HtmlToAnsi(
                "ffffff", "", false
            ), 
            console.HtmlToAnsi(
                "ffffff", "", false
            ), 
            `━`, 
            `┃`, 
            `┫`, 
            `┣`
        );
        set Columns := ["Command", "Brand"];
        set Rows := [];
        foreach var in commandexists {
            set v := var.Split("-");
            Rows.Append(
                [var, v[0]]
            )
        }
        println(console.Table(Rows, Columns))
        Rows.Reset()
        io.restore()
    } 
} 