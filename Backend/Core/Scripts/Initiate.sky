set Frontend := import("Backend/Core/Scripts/Frontend.sky");

set Interface := "";
set ARPState := "";
set SSDPState := "";
set TimerArp := 5; // 5 seconds is standard | converted to int on casters backend in the plugin
set Strict := "on";
set DebugState := false;
set Importdirectly := false;
set CLI_Mode := false;
set CLI_Session_File_For_File_Operations := "";
set CLI_Session_String_Binary_File := false;
set RokuECPMode := false;

/*
For Readers: If you are reading this code
SkyLine may be interpreted but acts like a standard 
machine code compiled language. SkyLine when using the 

SkyLine-Configuration Engine with calls like `ENGINE`
MUST use the `init()` function which will act as a "entry"
point for the interpreter once it is included
*/ 
define init() {
    ENGINE("Backend/Conf/EngineFiles/Engine.slmod")
    set Arguments := args();
    io.clear()
    Frontend::Banner()
    if (isroot() == "1000") {
        set expectedmatch := int(2);
        if ( Arguments.Length() > int(1)) {
            Arguments.PopL() // Lets get that file name out of the argument list
            foreach arg in Arguments {
                // parse standard flags first
                switch (arg) {
                    case "--debug" {
                        DebugState = true;
                    }
                    case "--import" {
                        Importdirectly = true;
                    }
                    case "--consolehelp" {
                        // view consolehelp
                        io.clear()
                        println(io.FormatBox(
                                Unique.HtmlToOut(
                                        "Backend/Core/Data/BannerHTMLHelp"
                                ), true
                            )
                        )
                        Frontend::ConsoleHelp()
                        quit(int(0))
                    }
                    case "--databases" {
                        io.clear()
                        println(io.FormatBox(
                                Unique.HtmlToOut(
                                        "Backend/Core/Data/BannerHTMLHelp"
                                ), true
                            )
                        )
                        set Res := json.Parse("Backend/UnitDatabase/TargetInfo.json")["Device"];
                        console.TableNew(
                            console.HtmlToAnsi(
                                "03fcb6", "", false
                            ), 
                            console.HtmlToAnsi(
                                "ffffff", "", false
                            ),  
                            console.HtmlToAnsi(
                                "ffffff", "", false
                            ),  
                            console.HtmlToAnsi(
                                "ffffff", "", false
                            ), 
                            console.HtmlToAnsi(
                                "ffffff", "", false
                            ), 
                            `━`, 
                            `┃`, 
                            `┫`, 
                            `┣`
                        );
                        set Cols := ["ID", "Database"];
                        set Rows := [
                            ["1", "apple"],
                            ["2", "amazon"],
                            ["3", "roku"],
                            ["4", "google"]
                        ];
                        Frontend::Logger("This information is to help you assign a database to the target file", "debug") 
                        Frontend::Logger("so that when you want to use the CLI option (--target) a database is used", "debug") 
                        Frontend::Logger("for API endpoints. The name of the database corresponds to the brand name ", "debug") 
                        Frontend::Logger("or manufac of the device in turn holding individual API endpoints.\n ", "debug") 
                        println(console.Table(Rows, Cols))
                        quit(
                            int(
                                0
                            )
                        )
                    }
                    case "--current" {
                        io.clear()
                        println(io.FormatBox(
                                Unique.HtmlToOut(
                                        "Backend/Core/Data/BannerHTMLHelp"
                                ), true
                            )
                        )
                        set Res := json.Parse("Backend/UnitDatabase/TargetInfo.json")["Device"];
                        console.TableNew(
                            console.HtmlToAnsi(
                                "03fcb6", "", false
                            ), 
                            console.HtmlToAnsi(
                                "ffffff", "", false
                            ),  
                            console.HtmlToAnsi(
                                "ffffff", "", false
                            ),  
                            console.HtmlToAnsi(
                                "ffffff", "", false
                            ), 
                            console.HtmlToAnsi(
                                "ffffff", "", false
                            ), 
                            `━`, 
                            `┃`, 
                            `┫`, 
                            `┣`
                        );
                        set Cols := ["Device Name", "Device Database", "Device IP"];
                        set Rows := [];
                        foreach node in Res {
                            Rows.Append(
                                [node["Brand"], node["Database"], node["IP"]]
                            )
                        };
                        println(console.Table(Rows, Cols))
                        quit(
                            int(
                                0
                            )
                        )
                    }
                    case "--help" {
                        // Display help
                        io.clear()
                        println(io.FormatBox(
                                Unique.HtmlToOut(
                                        "Backend/Core/Data/BannerHTMLHelp"
                                ), true
                            )
                        )
                        Frontend::Help()
                        quit(int(0))
                    }
                    case "--cli" {
                        CLI_Mode = true;
                    }
                    case "--currentscan" {
                        io.clear()
                        println(io.FormatBox(
                                Unique.HtmlToOut(
                                        "Backend/Core/Data/BannerHTMLHelp"
                                ), true
                            )
                        )
                        set Res := File.Open("Backend/UnitDatabase/TargetInfo.json");
                        println(
                            io.FormatBox(
                                Unique.HighlightPattern(
                                    Res,
                                    [
                                        console.HtmlToAnsi("f54299", ""),
                                        console.HtmlToAnsi("424bf5", ""),
                                        console.HtmlToAnsi("0ee6c2", "")
                    
                                    ],
                                    [
                                        `"IP": "(.*?)"`,
                                        `"Brand": "(.*?)"`,
                                        `"Database": "(.*?)"`
                                    ]
                                ),
                                false
                            )
                        )
                    }
                    case "--ECPConsole" {
                        RokuECPMode = true;
                    }
                    case "--stringbplist" {
                        CLI_Session_String_Binary_File = true;
                    }
                }
                
                // split each argument, lets go ahead and get its name and the setting
                set splitter := arg.Split("=");
                if (splitter.Length() >= expectedmatch) {
                    switch (splitter[0].Lower()) {
                        case "--target" {
                            // we want to actually write this target to the JSON file 
                            // the only issue is database specification
                            set newdata := `{
    "Device": [
        {
            "IP": "{}",
            "Brand": "{}",
            "Database": "{}" 
        }
    ]
}`.Format(
                                splitter[1],
                                "Empty, used --target",
                                "Empty, used --target");
                                        File.New("Backend/UnitDatabase/TargetInfo.json")
                                        File.Overwrite(newdata)
                        }
                        case "--file" {
                            // fill file
                            CLI_Session_File_For_File_Operations = splitter[1];
                        }
                        case "--strict" {
                            if (splitter[1] == "off") {
                                Assign("Strict", "off")
                            } else {
                                Assign("Strict", "on")
                            }
                        }
                        case "--interface" {
                            if (DebugState == true) {
                                Frontend::Logger("Interface Being Checked -> [{}]".Format(splitter[1]), "debug")
                            }
                            set net := network.NetByName(splitter[1]);
                            if (net == "Unknown") {
                                if ( DebugState == true ) {
                                    Frontend::Logger("The interface provided [{}{}{}] did not have any plausible addresses".Format(
                                        console.HtmlToAnsi("56fc03", ""),
                                        splitter[1], 
                                        console.HtmlToAnsi("0ee6c2", "")
                                    ), "debug")
                                    Frontend::Logger("This means that Caster's module will attempt to find a interface that is stable", "debug")
                                }  else if ( DebugState == false ) {
                                    Frontend::Logger("You should most likely use (--debug) currently <{}>!".Format(sprint(DebugState)), "warning")
                                    Frontend::Logger("There is some information you should see :D \n ", "warning")
                                }
                            } else {
                                Assign("Interface", splitter[1])
                            }
                        }
                        case "--arpdelim" {
                            Assign("TimerArp", splitter[1].ToInt())
                        }
                        case "--arp" {
                            if (splitter[1] == "off") {
                                Assign("ARPState", splitter[1])
                            } else if (splitter[1] == "on") {
                                Assign("ARPState", splitter[1])
                            } else {
                                Assign("ARPState", "on")
                            }
                        }
                        default {
                            io.clear()
                            println(io.FormatBox(
                                    Unique.HtmlToOut(
                                            "Backend/Core/Data/BannerHTMLHelp"
                                    ), true
                                )
                            )
                            Frontend::Logger("BAD MODULE NAME [{}] WITH VALUE [{}]       ".Format(splitter[0], splitter[1]), "error")
                            Frontend::Logger("Flag or module specification did not exist ", "error")
                            Frontend::Help()
                            quit(int(0))
                        }
                    }
                }
            } 
            // Now we can go ahead and import the plugin and pass the data that Caster's backend module needs. The plugin will need some work but its not that bad
            InitiatePlugin("Backend/Core/BinPlugins/Caster");
            if (ARPState == "on") {
                if (Interface == "") {
                    if (DebugState == true) {
                        Frontend::Logger("Plugin is loading interfaces...", "debug");
                    }
                    ExecuteFF("Framework", "StartArp", false, "");
                } else {
                    if (DebugState == true) {
                        Frontend::Logger("Plugin is using [{}] for Casters ARP module...".Format(Interface));
                    }
                    ExecuteFF("Framework", "StartArp", true, Interface);
                }
            }
            if (PluginState()) {
                if (DebugState == true) {
                    Frontend::Logger("Plugin state is [{}Active{}]!".Format(console.HtmlToAnsi("56fc03", ""), console.HtmlToAnsi("0ee6c2", "")), "debug")
                }
            } else {
                Frontend::Logger("Plugin state is invalid...this is a bad thing- horrid thing actually...", "error")
                quit(int(0))
            }
            ExecuteFF("Framework", "WriteRoutine", "Backend/UnitDatabase/Capture.json", TimerArp)
            if (Importdirectly == true) {
                ExecuteFF("Framework", "WriteToFile", "Backend/UnitDatabase/Capture.json");
            }
            Frontend::RestoreStd() 
            Frontend::NewLn()
        } else {
            Frontend::Logger("At least specify an interface or type 'help' for more", "error")
            quit(int(0));
        }
    } else {
        println("[Caster] Error: You need to be root to work this framework")
        quit(int(0))
    }
}


